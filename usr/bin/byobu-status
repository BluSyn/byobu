#!/bin/sh
#
#    byobu-status: byobu's cached status gathering
#
#    Copyright (C) 2011 Dustin Kirkland
#
#    Authors: Dustin Kirkland <kirkland@ubuntu.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

PKG="byobu"
[ -r "$HOME/.byoburc" ] && . "$HOME/.byoburc"
[ -z "${BYOBU_PREFIX}" ] && export BYOBU_PREFIX="/usr" || export BYOBU_PREFIX
. "${BYOBU_PREFIX}/lib/${PKG}/include/common"

# Make sure status is not disabled
[ -f "$BYOBU_CONFIG_DIR/status.disable" ] && exit 0

# Clean and create cache directories
mkdir -p "$BYOBU_RUN_DIR/status.$BYOBU_BACKEND" "$BYOBU_RUN_DIR/.last.$BYOBU_BACKEND"

# Source configurations
for i in "${BYOBU_PREFIX}/share/$PKG/status/status" "${BYOBU_PREFIX}/share/$PKG/status/statusrc" "$BYOBU_CONFIG_DIR/status" "$BYOBU_CONFIG_DIR/statusrc" "$BYOBU_CONFIG_DIR/color" "$BYOBU_CONFIG_DIR/color.tmux"; do
	[ -r "$i" ] && . "$i"
done

# Reload profile, if necessary
if [ -e "/var/run/screen/S-$USER/$PKG.reload-required" ] || [ -e "$BYOBU_RUN_DIR/reload-required" ]; then
	if [ "$BYOBU_BACKEND" = "screen" ] && [ -r "$BYOBU_CONFIG_DIR/profile" ]; then
		# If the forced janitorial steps succeed, try a profile reload
		byobu-janitor --force && screen -X at 0 source "$BYOBU_CONFIG_DIR/profile" >/dev/null 2>&1
	fi
fi

# Get the current timestamp
get_now; NOW=${_RET}

get_status() {
	local cachepath="$BYOBU_RUN_DIR/status.$BYOBU_BACKEND/$1"
	local lastpath="$BYOBU_RUN_DIR/.last.$BYOBU_BACKEND/$1"
	local lastrun
	[ -r "$lastpath" ] && read lastrun < "$lastpath" || lastrun=0
	case "$1" in
		ip_address4)
			IPV6=0
			function="ip_address"
		;;
		ip_address6)
			IPV6=1
			function="ip_address"
		;;
		*)
			function="$1"
		;;
	esac
	status_freq "$function"
	local expiry=$(($lastrun+$_RET))
	find_script "$function" && . "${_RET}"
	# Update cache now, if necessary
	if [ $NOW -ge $expiry ] || [ "$lastrun" = "0" ]; then
		"__$function" > "$cachepath"
		echo "$NOW" > "$lastpath"
	fi
	if [ -s "$cachepath" ]; then
		IFS= read line < "$cachepath"; printf "$line"
	fi
}

case "$1" in
	*left|*right)
		eval items="\$$1"
		for i in $items; do
			case "$i" in \#*) continue ;; esac
			get_status "$i"
		done
	;;
	--detail)
		VER=
		if command -v dpkg-query >/dev/null; then
			VER=$(set -- $(dpkg-query --show $PKG); echo "$2")
		fi
		printf "$PKG-$VER Detailed Status Navigation\n"
		if command -v vim >/dev/null && `vim --version | grep -q +folding`; then
			printf "  Expand all - zr\t\tCollapse all - zm\n  Expand one - zo\t\tCollapse one - zc\n\n"
		fi
		for i in "$BYOBU_PREFIX/lib/$PKG"/*; do
			[ -f "$i" ] || continue
			i=${i##*/}
			case "$i" in
				include|menu|notify_osd|time_binary) continue ;;
			esac
			find_script "$i" && . "${_RET}"
			short=$(eval "__${i}" | $SED -e 's/^\s*//' -e 's/\s*$//' -e 's/.{[^}]*}//g')
			detail=$(eval "__${i}_detail" 2>/dev/null | $SED -e '/^$/d' -e 's/^/\t/g')
			printf "%s\n\t(%s)\n" "$short" "$i"
			[ -n "$detail" ] && printf "%s\n" "$detail"
		done
	;;
	color)
		[ -z "$FOREGROUND" ] && FOREGROUND="w"
		[ -z "$BACKGROUND" ] && BACKGROUND="k"
		printf "$ESC{= $BACKGROUND$FOREGROUND}"
	;;
esac
